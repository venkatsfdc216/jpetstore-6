pipeline {
    agent any

    parameters {
        string(name: 'IMAGE_NAME',     defaultValue: 'vprofile',    description: 'Base Docker image name')
        string(name: 'DOCKER_USER',    defaultValue: 'venkat1009',  description: 'Docker Hub username')
        string(name: 'IMAGE_VERSION',  defaultValue: 'latest',      description: 'Version/tag for the image')
        string(name: 'CONTAINER_NAME', defaultValue: 'vprofile',    description: 'Name for the running container')
        string(name: 'HOST_PORT',      defaultValue: '8082',        description: 'Host port to expose')
        string(name: 'CONTAINER_PORT', defaultValue: '8083',        description: 'Container internal port')
    }

    stages {
        stage('Checkout SCM') {
            steps {
                checkout scmGit(
                    branches: [[name: '*/main']],
                    extensions: [],
                    userRemoteConfigs: [[
                        credentialsId: 'ubuntu',
                        url: 'https://github.com/thivaibhav/vprofile-project.git'
                    ]]
                )
            }
        }

        stage('Maven Compile') {
            steps {
                sh 'mvn clean compile'
            }
        }

        stage('Maven Test') {
            steps {
                sh 'mvn test'
            }
        }

        stage('Maven Package') {
            steps {
                sh 'mvn package'
            }
        }

        stage('Build and Push to Docker Hub') {
            steps {
                script {
                    def fullImage = "${params.DOCKER_USER}/${params.IMAGE_NAME}:${params.IMAGE_VERSION}"
                    withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {
                        sh "docker build -t ${params.IMAGE_NAME}:${params.IMAGE_VERSION} ."
                        sh "docker tag ${params.IMAGE_NAME}:${params.IMAGE_VERSION} ${fullImage}"
                        sh "docker push ${fullImage}"
                    }
                }
            }
        }

        stage('Deploy to Container') {
            steps {
                script {
                    def fullImage = "${params.DOCKER_USER}/${params.IMAGE_NAME}:${params.IMAGE_VERSION}"
                    // Clean up any existing container
                    sh "docker rm -f ${params.CONTAINER_NAME} || true"

                    // Run the container
                    sh """
                        docker run -d \\
                        --name ${params.CONTAINER_NAME} \\
                        -p ${params.HOST_PORT}:${params.CONTAINER_PORT} \\
                        ${fullImage}
                    """
                }
            }
        }
    }
}
